#pragma config(Hubs,  S1, HTServo,  HTServo,  HTServo,  HTMotor)
#pragma config(Hubs,  S2, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Sensor, S3,     HTANG,          sensorI2CCustom)
#pragma config(Sensor, S4,     HTCOMP,         sensorI2CHiTechnicCompass)
#pragma config(Motor,  mtr_S1_C4_1,     runBelt,       tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C4_2,     goalLift,      tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S2_C1_1,     tubeLift,      tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C1_2,     motorG,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C2_1,     driveR,        tmotorTetrix, openLoop, reversed, driveRight)
#pragma config(Motor,  mtr_S2_C2_2,     driveL,        tmotorTetrix, openLoop, driveLeft, encoder)
#pragma config(Servo,  srvo_S1_C1_1,    clampL,               tServoStandard)
#pragma config(Servo,  srvo_S1_C1_2,    pushL,                tServoStandard)
#pragma config(Servo,  srvo_S1_C1_3,    liftL,                tServoStandard)
#pragma config(Servo,  srvo_S1_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C1_6,    intake,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_1,    clampR,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_2,    pushR,                tServoStandard)
#pragma config(Servo,  srvo_S1_C2_3,    liftR,                tServoStandard)
#pragma config(Servo,  srvo_S1_C2_4,    servo10,              tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo11,              tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo12,              tServoNone)
#pragma config(Servo,  srvo_S1_C3_1,    beltGuard,            tServoStandard)
#pragma config(Servo,  srvo_S1_C3_2,    headR,                tServoStandard)
#pragma config(Servo,  srvo_S1_C3_3,    headL,                tServoStandard)
#pragma config(Servo,  srvo_S1_C3_4,    servo16,              tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    servo17,              tServoNone)
#pragma config(Servo,  srvo_S1_C3_6,    servo18,              tServoNone)
#pragma config(Sensor, S2,     HTIRS2,         sensorI2CCustom)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "auto_tasks.h"
#include "teleop_tasks.h"
#include "hitechnic-irseeker-v2.h"

task main()
{
	tHTIRS2 irSeeker;
	initSensor(&irSeeker, S1);
	irSeeker.mode = DSP_1200;

	irSeeker.acValues[0]; //values 0-4

	int pos = 0;
	initializeRobot();
	waitForStart();
	clearTimer(T1);
	moveStraight(235, 50);
	while( time1[T1] < 500)
       //need to varify timer value and ir sensor values
	{
		if (irSeeker.acValues[2] > 35)
		{
			pos = 1;
		}
		else if (irSeeker.acValues[2] > 30 && irSeeker.acValues[2] < 35)
		{
			pos = 2;
		}
		moveSpin(-50, 1.4);
		moveStraight(75, 30);
		moveSpin(-50, 1.4);
		moveStraight(147, 30);
		moveSpin(50, 1.4);
		wait10Msec(200);
	}
	switch(pos)
	{
		case 1: //need to verify the route values
		moveStraight(124, 50);
		moveSpin(50, 1.4);
		moveStraight(62, 50);
		moveSpin(50, 1.4);
		moveStraight(31, 50);
		motor[runBelt] = 100;
		wait10Msec(200);
		break;
		case 2: //need to verify the route values
		moveStraight(124, 50);
		moveSpin(-50, 2);
		moveStraight(25, 50);
		motor[runBelt] = 100;
		wait10Msec(200);
		break;
		default: //need to verify the route values
		clearTimer(T1);
		moveSpin(50, 1.4);
		moveStraight(62, 30);
		moveSpin(-50, 1.4);
		moveStraight(74, 50);
		moveSpin(50, .5);
		moveStraight(93, 50);
		wait10Msec(6000);
		break;
	}
}
